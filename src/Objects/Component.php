<?php

namespace PcBuilder\Objects;

/**
 * The component is a peace of the computer that the user can make
 *
 * @version 1.0
 * @author Ruben de Roos
 */
class Component
{
    /**
     * The if of the Component
     * This id wil be generated by the mysql database when created
     * @var int
     */
    private int $id;
    /**
     * The display name is the name that the customer can see when selecting the component's for the computer
     * @var String
     */
    private String $displayName;
    /**
     * The description is extra information for the customer to select the component
     * @var string
     */
    private String $description = "<p style='color: red'>No description found</p>";
    /**
     * The image is the first expression that the customer will get of the component
     * @var string
     */
    private String $image = "https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/832px-No-Image-Placeholder.svg.png";
    /**
     * The price is what the user will pay for the component
     * @var float|int
     */
    private float|int $price = 9999;
    /**
     * The power is what the component will draw of the power supply
     * @var int
     */
    private int $powerNeed;
    /**
     * The type of the component of base of this variable the component will load to the right block
     * @var String
     */
    private String $type;
    /**
     * The tweakers / megekko id is the id that will be used to find the realtime price
     * @var int
     */
    private int $tweakersId;
    /**
     * The enabled variable will be used to
     * @var bool
     */
    private bool $enabled;

    /**
     * @param int $id the if of the component
     * @param String $displayName the display name of the component
     */
    public function __construct(int $id, string $displayName)
    {
        $this->id = $id;
        $this->displayName = $displayName;
    }


    /**
     * Get the if of the component
     * @return int
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Set the display name of the component
     * @param String $displayName
     */
    public function setDisplayName(string $displayName): void
    {
        $this->displayName = $displayName;
    }

    /**
     * Get the tweakers/megekko id
     * If the id is not set it wil return -1 that's the wild card
     * @return int
     */
    public function getTweakersId(): int
    {
        if(!isset($this->tweakersId)){
            return -1;
        }
        return $this->tweakersId;
    }

    /**
     * Set the tweakers/megekko id of the component
     * @param int $tweakersId
     */
    public function setTweakersId(int $tweakersId): void
    {
        $this->tweakersId = $tweakersId;
    }

    /**
     * Get the display name of the component
     * @return String
     */
    public function getDisplayName(): string
    {
        return $this->displayName;
    }

    /**
     * Get the image of the component
     * If the image starts with http it will return the string else it will add a / at the start to make the request work
     * @return String
     */
    public function getImage(): string
    {
        if(str_starts_with($this->image,"http")){
            return $this->image;
        }
        return "/".$this->image;
    }

    /**
     * Get the raw image with no modification
     * @return String
     */
    public function getRawImage(): string
    {
        return $this->image;
    }


    /**
     * Get the price of the component
     * @return float
     */
    public function getPrice(): float
    {
        return $this->price;
    }

    /**
     * Set the image location/url of the component
     * @param String $image
     */
    public function setImage(string $image): void
    {
        $this->image = $image;
    }

    /**
     * Set the price of the component
     * @param float $price
     */
    public function setPrice(float $price): void
    {
        $this->price = $price;
    }

    /**
     * Get the description of the component
     * @return string
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Set the description of the component
     * @param string $description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Get the power what the component need
     * @return int
     */
    public function getPowerNeed(): int
    {
        return $this->powerNeed;
    }

    /**
     * Set the power amount what the component need
     * @param int $powerNeed
     */
    public function setPowerNeed(int $powerNeed): void
    {
        $this->powerNeed = $powerNeed;
    }

    /**
     * Get the type of the component
     * @return String
     */
    public function getType(): string
    {
        if($this->type == null){
            return "";
        }
        return $this->type;
    }

    /**
     * Set the type of the component
     * @param String $type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Get if the component is enabled
     * @return bool
     */
    public function isEnabled(): bool
    {
        return $this->enabled;
    }

    /**
     * Set if the component is enabled
     * @param bool $enabled
     */
    public function setEnabled(bool $enabled): void
    {
        $this->enabled = $enabled;
    }

}